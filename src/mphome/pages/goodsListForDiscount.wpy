<style lang="less">
.priceStyle {
    background-position: 75% 50%;
    padding-right: 35rpx;
    display: block;
    background-size: 20rpx 32rpx;
}
.page {
    width: 100%;
    background-color: #f7f7f7;
}
.header-wrap {
    z-index: 2;
    position: fixed;
    width: 100%;
    top: 0;
    color: #777777;
    font-size: 30rpx;
}
.header {
    // z-index:2;
    // position: fixed;
    // width: 100%;
    // top:0;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    background: white;
    view {
        flex: 1;
        text-align: center;
        padding: 30rpx 0;
    }
    .icon-icon_shaixuan {
        display: inline-block;
        margin-left: 10rpx;
        font-size: 30rpx;
        color: #cdcdcd;
    }
    .active {
        color: #ff414b;
        .icon-icon_shaixuan {
            color: #ff414b;
        }
    }
    .none {
        background: url(https://i2.ygimg.cn/cmp/mp/yg-price.png) no-repeat;
        .priceStyle();
    }

    .desc {
        background: url(https://i2.ygimg.cn/cmp/mp/yg-price-down.png) no-repeat;
        .priceStyle();
    }

    .asc {
        background: url(https://i2.ygimg.cn/cmp/mp/yg-price-up.png) no-repeat;
        .priceStyle();
    }
}

.list_wrap {
    width: 100%;
    .goods_list {
        .no_moreData {
            text-align: center;
            width: 100%;
            color: #ccc;
            font-size: 35rpx;
            padding: 5rpx 0;
        }
        background: #f7f7f7;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        box-sizing: border-box;
        justify-content: space-between;
        width: 100%;
        // margin-top: 110rpx;
    }
}

.nothing_wrap {
    height: e('calc(100vh - 186rpx)');
    // margin-top: 186rpx;
    width: 100%;
    overflow: hidden;
    background-color: #fff;
    .head_content {
        // width: 325rpx;
        // height: 500rpx;
        margin: 0 auto;
        margin-top: 80rpx;
        text-align: center;
        .icon {
            // width: 85rpx;
            // height: 85rpx;
            width: 260rpx;
            height: 170rpx;
            padding-top: 83rpx;
        }

        .text {
            width: 100%;
            margin-top: 34rpx;
            text-align: center;
            color: #7a7a7a;
        }
    }
    .foot_content {
        position: fixed;
        bottom: 0;
        box-sizing: border-box;
        width: 100%;
        background-color: white;
        .title {
            height: 108rpx;
            line-height: 108rpx;
            margin-left: 30rpx;
            color: #696969;
            font-size: 34rpx;
            color: #3a3a3a;
            text-align: center;
            letter-spacing: 8rpx;
        }
        .goods_recommend {
            padding: 0 10rpx 30rpx;
            // padding: 0 30rpx 30rpx;
            display: flex;
            flex-direction: row;
            justify-content: flex-start;
            .items {
                width: 222rpx;
                margin: 0 10rpx;
                .pic {
                    width: 100%;
                    height: 222rpx;
                    background: #f7f7f7;
                    border: 1rpx solid #f7f7f7;
                }
                .price {
                    width: 100%;
                    color: #ff3d6f;
                    text-align: center;
                    margin-top: 20rpx;
                }
            }
        }
    }
}
.icon-icon_shaixuan {
    display: inline-block;
    margin-left: 10rpx;
    font-size: 30rpx;
    color: #cdcdcd;
}

// 筛选条件
.filter-condition {
    display: flex;
    background-color: #f7f7f7;
    .filter-list {
        padding: 0 10rpx;
        scroll-view {
            width: 630rpx;
            // padding: 24rpx 10rpx;
            white-space: nowrap;
            .padding-wrap {
                height: 100rpx;
            }
        }
        .filter-sub {
            display: inline-block;
            border: 1px solid #b8b8b8;
            border-radius: 4rpx;
            color: #7a7a7a;
            font-size: 24rpx;
            // padding:14rpx;
            margin: 0 10rpx;
            // width:162rpx;
            height: 52rpx;
            line-height: 52rpx;
            margin: 24rpx 10rpx;
            .padding-wrap {
            }
            .filter-label {
                float: left;
                padding-left: 10rpx;
            }
            .filter-detail {
                width: 75rpx;
                overflow: hidden;
                text-overflow: ellipsis;
                display: inline-block;
                white-space: nowrap;
                text-overflow: ellipsis;
                float: left;
            }
            .price-detail {
                width: auto;
            }
            .icon-icon_shanchu1 {
                margin-left: 10rpx;
                color: #7a7a7a;
                font-size: 24rpx;
                padding-right: 14rpx;
            }
        }
    }
    view.del-all {
        width: 78rpx;
        height: 100rpx;
        line-height: 100rpx;
        text-align: center;
        background-color: #f7f7f7;
        font-size: 34rpx;
    }
}
.filter-btn {
    width: 160rpx;
    height: 58rpx;
    line-height: 58rpx;
    margin: 0 auto;
    font-size: 28rpx;
    color: #7a7a7a;
    text-align: center;
    border-radius: 4rpx;
    margin-top: 70rpx;
    border: 1px solid #7a7a7a;
}
.gray-border {
    width: 100%;
    height: 20rpx;
    background-color: #f7f7f7;
}
.mt186 {
    margin-top: 186rpx;
}
.no-mt{
    margin-top: 0rpx !important;
}
.mt130 {
    margin-top: 130rpx;
}
</style>
<template>
  <!-- <view class="header-wrap">
    <view  class="header">   
      <view @tap="changeType" id="sale_quantity_order" class="{{OrderType=='sale_quantity_order'?'active':''}}">销量</view>
      <view @tap="changeType" id="update_order" class="{{OrderType=='update_order'?'active':''}}">新品</view>      
      <view @tap="changeType" id="popularity" class="{{OrderType=='popularity'?'active':''}}">人气</view>
      <view @tap="priceChangeState" id="price_order" class="{{priceClass}}" >价格</view>
      <view @tap="goToFilter" id="filter" class="{{emptyFilter || filterStatus ? 'active':''}}">筛选<text class="iconfont icon-icon_shaixuan">&#xe62c;</text></view>
    </view>
    <view>
      <view class="filter-condition" wx:if="{{emptyFilter}}">
        <view class="filter-list">
          <scroll-view class="scroll-view_H" scroll-x> 
            <view class="padding-wrap">
              <view class="filter-sub scroll-view-item" wx:for="{{replaceListArr}}" wx:key="{{index}}" wx:for-index="index" wx:for-item="item" @tap="delFilter({{item}},{{index}})">
                <text class="filter-label-wrap">
                  <text class="filter-label">{{item.name}}: </text>
                  <text class="filter-detail" wx:if="{{item.name !== '价格'}}">{{item.dataList[0].name}} <text> ...</text> </text>
                  <text class="filter-detail price-detail" wx:if="{{item.name == '价格' && item.dataList[0].name !== '' && item.dataList[1].name !== ''}}"> {{item.dataList[0].name}}-{{item.dataList[1].name}}</text>
                  <text class="filter-detail price-detail" wx:if="{{item.name == '价格' && item.dataList[0].name !== '' && item.dataList[1].name === ''}}"> {{item.dataList[0].name}}</text>
                  <text class="filter-detail price-detail" wx:if="{{item.name == '价格' && item.dataList[0].name === '' && item.dataList[1].name !== ''}}"> {{item.dataList[1].name}}</text>
                </text>
                <text class="iconfont icon-icon_shanchu1">&#xe630;</text>
              </view>
            </view>
          </scroll-view>
        </view>
        <view class="del-all iconfont icon-icon_qingkong" @tap="delFilterDataAll">&#xe62e;</view>
      </view>
    </view>
  </view> -->
    <scroll-view wx:if="{{!isEmpty}}" class="list_wrap" scroll-y >
      <wxc-notice wx:if="{{ruleMsg}}" scroll="true" show-icon="true" icon-color="#FF424D" notice="{{ruleMsg}}" bg-color="#FFF0F1" color="#FF424D"></wxc-notice>
      <view class="goods_list {{ruleMsg ? '' : 'no-mt'}}">
        <repeat for="{{listData}}" key="index" index="index" item="item">
           <goodsListItem :item="item"/>  
        </repeat>
      </view>
       <view wx:if="{{NoMoreData}}" class="weui-loadmore">没有更多数据</view>
       <view class="weui-loadmore" wx:if="{{hasMoreData}}">
         <view class="weui-loading"></view>
         <view class="weui-loadmore__tips">正在加载</view>
       </view>
   </scroll-view>
 
<!-- 查询商品为空 -->
   <scroll-view scroll-y="{{false}}" class="nothing_wrap {{reFilterFlag && emptyFilter ? 'mt186' : 'mt130'}}"  wx:if="{{isEmpty}}">
      <view class="head_content">
          <image  class="icon" src="https://i2.ygimg.cn/cmp/mp/no-goods-list.png"></image>
          <view class='text'>
            <view>抱歉，没有找到相关商品</view>
            <view class="filter-btn" @tap="jumpFilter" wx:if="{{reFilterFlag}}">重新筛选</view>
          </view>
      </view>
      <view class="foot_content">
        <view class="gray-border"></view>
        <view class="title"> ▪ 为您推荐 ▪ </view>
        <view class="goods_recommend">   
           <repeat for="{{recommendList}}" key="index" index="index" item="item">   
               <view @tap="recommendGoodsClick({{item.no}})" id="{{item.no}}" class="items">
                  <image class="pic" src="{{item.pictureMb}}"></image>
                  <view class="price">
                    <text>￥</text>       
                    <text>{{item.wfxPrice}}</text>     
                  </view>
               </view>    
           </repeat>    
        </view>
      </view>
   </scroll-view>
</template>

<script>
import wepy from 'wepy';
import GTools from '@/mixins/g-tools';
import goodsListItem from '@/components/goodsList-item';
// 商品列表
export default class goodList extends wepy.page {
    mixins = [GTools];
    config = {
        navigationBarTitleText: '促销商品列表',
        backgroundColor: '#f4f4f4',
        usingComponents: {
            'wxc-flex': '../../../packages/@minui/wxc-flex/dist/index',
            'wxc-notice': '../../../packages/@minui/wxc-notice/dist/index'
        }
    };
    components = {
        goodsListItem
    };
    data = {
        listData: [],
        recommendList: [],
        pageNum: 1, //初始化
        hasMoreData: false,
        NoMoreData: false,
        maxPageNum: 0, //临界值 已经最大了
        totalCount: 0,
        pageCount: 0, //总的页数

        OrderType: 'sale_quantity_order', //默认值
        priceState: 'none',
        priceClass: 'none',
        openId: '',
        paramsDefault: {
            // commodity_no: '',
            limit: 20, //默认值
            pageNo: 1
            // popularity: '', //人气
            // price_order: '', //价格
            // sale_quantity_order: '', //销量
            // update_order: '', //新品

            //新增数据
            // brand_no_list: [], //品牌编码
            // cat_no_list: [], //分类编码
            // color_list: [], //颜色
            // max_price: '',
            // min_price: '',
            // prop_value_nolist: [], //属性项list(性别、款式、风格、季节) ,
            // size_no_list: [] //尺码
            // update_order:'',
            // cat_id: '',//分类
            // cat_no: '',//分类编码 ,
            // pageNo: 1,
            // popularity: '',
            // price_order: '',
            // sale_quantity_order: '',
            //commodity_name:'',//搜索的商品名称
            // commodity_no: '',
            // limit: '',
            // brand_no:'',//brand_no
            // },
        }, //传递参数
        currentParams: {},
        isEmpty: false,

        emptyFilter: false,
        filterTagList: [],
        replaceListArr: [],
        options: {}, //初始化数据

        filterList: [], //筛选数组
        //价格属性
        pricelist: {
            code: -1,
            name: '价格',
            dataList: [
                { id: 'minprice', name: '', checked: false },
                { id: 'maxprice', name: '', checked: false }
            ]
        },
        filterStatus: false, //筛选状态
        reFilterFlag: false, //筛选按钮显示隐藏
        activityId: '',
        ruleMsg: ''
    };
    methods = {
        recommendGoodsClick(id) {
            let shopId = wepy.getStorageSync('shopId');
            let commodityNo = id;
            wepy.navigateTo({
                url: `/pages/goodsDetail?commodityNo=${commodityNo}&shopId=${shopId}`
            });
        },
        // async goToFilter() {
        //     this.filterStatus = true;
        //     let filterList = wepy.getStorageSync('filterList');
        //     wepy.setStorageSync('flag', false);
        //     //筛选功能
        //     if (!filterList) {
        //         await this.initfilterData(this.options);
        //     }
        //     this.$navigate('/mphome/pages/goodsFilter');
        // },
        // changeType(event) {
        //     let _type = event.target.id;
        //     console.log(_type);
        //     let OrderType = this.OrderType;

        //     if (_type === OrderType) {
        //         return;
        //     }
        //     this.OrderType = _type;
        //     this.priceClass = 'none';
        //     this.priceState = 'none';
        //     let paramsobject = {};
        //     paramsobject[_type] = 'desc';
        //     this.firstLoadData(1, paramsobject);
        // },
        // priceChangeState(event) {
        //     //价格状态切换
        //     let _type = event.target.id;
        //     this.OrderType = _type;
        //     let priceState = this.priceState;
        //     let flag;
        //     let paramsobject = {};
        //     if (priceState === 'none') {
        //         flag = 'asc';
        //     } else if (priceState === 'desc') {
        //         flag = 'asc';
        //     } else {
        //         flag = 'desc';
        //     }
        //     //this.priceState='asc';//增序
        //     this.priceState = flag;
        //     this.priceClass = flag + '  active';
        //     paramsobject[_type] = flag;
        //     this.firstLoadData(1, paramsobject);
        // },
        onReachBottom(event) {
            if (this.maxPageNum) {
                //当maxPageNum有值的时间便不再发起请求；
                this.NoMoreData = true;
                return;
            }
            let pageNum = this.pageNum;
            this.pageNum = pageNum + 1;
            this.loadMoreData(pageNum + 1);
            console.log(pageNum + 1);
        }
    };

    async loadMoreData(num) {
        // let url = `${this.$parent.globalData.apiBaseUrlMock}/goodList`;
        let openId = this.openId;
        let url = `${
            this.$parent.globalData.apiBaseUrl
        }/api/v2/shop/activityGoodsList?openId=${openId}&merchantNo={$merchantNo}&activityId=${
            this.activityId
        }`;
        let params;
        params.pageNo = num;

        let response = await wepy.request({
            url: url,
            data: params,
            method: 'POST'
        });
        let { data, code, errorMsg } = response.data;
        if (code !== 20000) {
            this.customFunction.toast(errorMsg || '数据错误！');
            return;
        }

        let { voPage } = data;
        let { items } = voPage;
        let pageCount = this.pageCount;
        this.listData = this.listData.concat(items);
        if (pageCount === num) {
            this.hasMoreData = false;
            this.NoMoreData = true;
            this.maxPageNum = num;
        }
        this.$apply();
    }

    initState() {
        //初始化状态
        this.listData = [];
        this.pageNum = 1; //初始化
        this.hasMoreData = false;
        this.NoMoreData = false;
        this.maxPageNum = 0; //临界值 已经最大了
        this.totalCount = 0;
        this.pageCount = 0; //总的页数
        this.isEmpty = false;
        //this.currentParams={}; bug 会把前面的条件清空
        this.$apply();
    }
    // jumpFilter() {
    //     wepy.setStorageSync('flag', false);
    //     this.$navigate('/mphome/pages/goodsFilter');
    // }
    async firstLoadData(num = 1, selectParams) {
        //默认是降序  销量
        // let url = `${this.$parent.globalData.apiBaseUrlMock}/goodList`;
        this.initState();
        const openId = await this.customFunction.getOpenId();
        let url = `${
            this.$parent.globalData.apiBaseUrl
        }/api/v2/shop/activityGoodsList?openId=${openId}&merchantNo={$merchantNo}&activityId=${
            selectParams.activityId
        }`;
        let params = Object.assign(
            {},
            this.paramsDefault,
            // this.currentParams,
            selectParams
        ); //传入保存其他页面传入的值  注意assign顺序
        params.pageNo = num;
        this.params = params;
        this.openId = openId;
        // let thirdObj = Object.assign({}, params);
        // let arr = [
        //     'popularity', //人气
        //     'price_order', //价格
        //     'sale_quantity_order', //销量
        //     'update_order' //新品
        // ];
        // for (let i = 0; i < arr.length; i++) {
        //     //把上一次的状态清空（只清空上面四个状态  其他的参数是其他页面传过来的 得保存）
        //     thirdObj[arr[i]] = '';
        // }

        // this.currentParams = Object.assign({}, thirdObj); //保存其他页面传入的值
        let response = await this.customFunction.fetchData(url, params, {
            method: 'POST'
        });
        let { data, code, errorMsg } = response;
        if (code !== 20000) {
            this.customFunction.toast(errorMsg || '数据错误！');
            return;
        }
        let { count, voPage ,ruleMsg } = data;
        this.ruleMsg = ruleMsg;
        if (count === 0) {
            //没有 商品列表
            this.isEmpty = true;
            this.laodRecommendData(data.rcList);
            return;
        }

        let { items, pageCount, totalCount } = voPage;
        this.pageCount = pageCount;
        this.totalCount = totalCount;
        this.listData = items.concat([]);   

        if (pageCount === 1) {
            //第一次加载0-20  无更多数据
            this.hasMoreData = false;
            this.NoMoreData = false; //是否显示？
            this.maxPageNum = 1;
        } else {
            //pageCount>1
            this.hasMoreData = true;
            this.NoMoreData = false;
        }
        this.$apply();
    }

    async laodRecommendData(responseData) {
        this.recommendList = responseData;
        this.$apply();
    }
    // async delFilterDataAll() {
    //     let filterList = wepy.getStorageSync('filterList');
    //     this.emptyFilter = false;
    //     this.replaceListArr = [];
    //     for (let i = 0; i < filterList.length; i++) {
    //         filterList[i].subMenu = false;
    //         for (let j = 0; j < filterList[i].dataList.length; j++) {
    //             filterList[i].dataList[j].checked = false;
    //         }
    //     }
    //     filterList[0].dataList[0].name = '';
    //     filterList[0].dataList[1].name = '';
    //     this.emptyFilter = false;
    //     this.filterStatus = false;
    //     this.filterList = filterList;
    //     await this.resetState();
    //     wepy.setStorageSync('filterList', filterList);
    // }
    // async delFilter(item) {
    //     let filterList = wepy.getStorageSync('filterList');
    //     let filterIndex = item.currentTarget.dataset.wpydelfilterA.index;
    //     let subIndex = item.currentTarget.dataset.wpydelfilterB;
    //     this.replaceListArr.splice(subIndex, 1);
    //     filterList[filterIndex].subMenu = false;
    //     if (filterIndex === 0) {
    //         filterList[0].dataList[0].name = '';
    //         filterList[0].dataList[1].name = '';
    //     }
    //     console.log(filterIndex);
    //     for (let i = 0; i < filterList[filterIndex].dataList.length; i++) {
    //         filterList[filterIndex].dataList[i].checked = false;
    //     }
    //     if (this.replaceListArr.length === 0) {
    //         this.emptyFilter = false;
    //         this.filterStatus = false;
    //     }
    //     this.filterList = filterList;
    //     await this.resetState();
    //     wepy.setStorageSync('filterList', filterList);
    //     //请求
    // }
    // async resetState() {
    //     console.log(this.replaceListArr);
    //     this.currentParams.min_price = '';
    //     this.currentParams.max_price = '';
    //     this.currentParams.brand_no_list = [];
    //     this.currentParams.cat_no_list = [];
    //     this.currentParams.size_no_list = [];
    //     this.currentParams.color_list = [];
    //     this.currentParams.prop_value_nolist = [];

    //     for (let i = 0; i < this.replaceListArr.length; i++) {
    //         for (let j = 0; j < this.replaceListArr[i].dataList.length; j++) {
    //             console.log(this.replaceListArr[i].name);
    //             switch (this.replaceListArr[i].name) {
    //                 case '价格':
    //                     if (
    //                         this.replaceListArr[i].dataList[j].id === 'minprice'
    //                     ) {
    //                         this.currentParams.min_price = this.replaceListArr[i].dataList[j].name;
    //                     } else {
    //                         this.currentParams.max_price = this.replaceListArr[i].dataList[j].name;
    //                     }
    //                     break;
    //                 case '品牌':
    //                     this.currentParams.brand_no_list.push(
    //                         this.replaceListArr[i].dataList[j].id
    //                     );
    //                     break;
    //                 case '分类':
    //                     this.currentParams.cat_no_list.push(
    //                         this.replaceListArr[i].dataList[j].id
    //                     );
    //                     break;
    //                 case '尺寸':
    //                     this.currentParams.size_no_list.push(
    //                         this.replaceListArr[i].dataList[j].id
    //                     );
    //                     break;
    //                 case '颜色':
    //                     this.currentParams.color_list.push(
    //                         this.replaceListArr[i].dataList[j].id
    //                     );
    //                     break;
    //                 case '性别':
    //                 case '款式':
    //                 case '风格':
    //                 case '季节':
    //                     this.currentParams.prop_value_nolist.push(
    //                         this.replaceListArr[i].dataList[j].id
    //                     );
    //                     break;
    //             }
    //         }
    //     }

    //     this.priceClass = 'none';
    //     this.priceState = 'none';
    //     // let params = Object.assign({}, this.paramsDefault);
    //     let paramsobject = {};
    //     paramsobject[this.OrderType] = 'desc';
    //     console.log(this.paramsDefault);
    //     if (wepy.getStorageSync('flag')) {
    //         console.log(wepy.getStorageSync('flag') + '请求了数据');
    //         await this.firstLoadData(1, paramsobject);
    //     }
    // }
    // async initfilterData(opt) {
    //     try {
    //         await wepy.showLoading({
    //             title: '加载中',
    //             mask: true
    //         });
    //         let openId = await this.customFunction.getOpenId();
    //         // let openId = 'oBPQT0XZ0aGa2k3oVDzX3ZCj7fK4';
    //         let url = `${
    //             this.$parent.globalData.apiBaseUrl
    //         }/api/v2/shop/getGoodsListSelections?openId=${openId}&merchantNo={$merchantNo}`;
    //         let res = await wepy.request({
    //             url: url,
    //             method: 'POST',
    //             data: {
    //                 brand_no: opt.brand_no,
    //                 cat_id: opt.cat_id,
    //                 commodity_name: opt.commodity_name,
    //                 commodity_no: opt.commodity_no
    //             }
    //         });
    //         if (res.data.code === 20000) {
    //             let filterList = res.data.data;
    //             filterList.splice(0, 0, this.pricelist);
    //             this.filterList = filterList;
    //             await wepy.setStorageSync('filterList', filterList);
    //             // await wepy.getStorageSync("filterList", filterList);
    //             this.$apply();
    //         } else {
    //             await wepy.showToast({
    //                 title: res.data.msg || res.data.errorMsg,
    //                 icon: 'none',
    //                 duration: 2000
    //             });
    //         }
    //     } catch (error) {
    //         console.log(error);
    //     }
    //     await wepy.hideLoading();
    // }
    // //处理缓存数据
    // async dealfilterData(list) {
    //     let that = this;
    //     let listArr = [];
    //     let replaceListArr = [];
    //     for (let i = 0; i < list.length; i++) {
    //         listArr.push({});
    //         listArr[i].name = list[i].name;
    //         listArr[i].code = list[i].code;
    //         listArr[i].index = i;
    //         listArr[i].dataList = [];
    //         for (let j = 0; j < list[i].dataList.length; j++) {
    //             if (list[i].dataList[j].checked) {
    //                 listArr[i].dataList.push(list[i].dataList[j]);
    //             }
    //         }
    //     }

    //     for (var i = 0; i < listArr.length; i++) {
    //         if (listArr[i].dataList.length) {
    //             replaceListArr.push(listArr[i]);
    //         }
    //     }

    //     that.replaceListArr = replaceListArr;
    //     that.emptyFilter = that.replaceListArr.length;
    //     await that.resetState();
    //     //that.replaceListArr处理后数据
    //     console.log(that.replaceListArr);
    //     console.log(that.emptyFilter);
    // }
    onLoad(options) {
        // let commodityName = options.commodity_name;
        // let commodityNo = options.commodity_no;
        // let brandNo = options.brand_no;
        // let catId = options.cat_id;
        let activityId = options.activityId;
        this.activityId = activityId;
        // console.log('清除缓存');
        // wepy.removeStorageSync('filterList'); //进入之前清除缓存
        // wepy.removeStorageSync('flag'); //重复请求标识清除
        // wepy.removeStorageSync('reFilterFlag'); //清除重新加载按钮缓存，不显示按钮
        // console.log(wepy.getStorageSync('filterList'));
        // let catNo = options.cat_no;
        this.options = options;
        let pageNum = this.pageNum || 1;

        this.firstLoadData(pageNum, {
            // sale_quantity_order: 'desc',
            // commodity_no: commodityNo || '',
            // brand_no: brandNo || '',
            // commodity_name: commodityName || '',
            // cat_id: catId || '',
            // cat_no: catNo || '',
            activityId: activityId || ''
        });
    }

    // onShow() {
    //     this.filterStatus = false;
    //     let filterList = wepy.getStorageSync('filterList');
    //     this.reFilterFlag = wepy.getStorageSync('reFilterFlag');
    //     if (!filterList) {
    //         console.log('没有缓存');
    //         this.initfilterData(this.options);
    //     } else {
    //         console.log('有缓存');
    //         this.dealfilterData(filterList);
    //         this.filterList = filterList;
    //     }
    // }
}
</script>
