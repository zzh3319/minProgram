<style lang="less">
.container {
    height: 100%;
    background-color: #f4f4f4;
    color: #333;
    font-size: 32rpx;

    .section {
        padding: 0 24rpx;
        .label {
            height: 94rpx;
            line-height: 94rpx;
            .required {
                color: #eb585f;
            }
        }
        picker {
            background-color: #fff;
            height: 96rpx;
            line-height: 96rpx;
        }
        input {
            background-color: #fff;
            height: 96rpx;
            line-height: 96rpx;
            padding-left: 38rpx;
        }
        textarea {
            height: 185rpx;
            line-height: 1.5;
            width: auto;
            background-color: #fff;
            padding: 30rpx 38rpx;
            font-size: 32rpx;
        }
        .remark {
            color: #999;
        }
    }

    .refundType {
        .label {
            height: 96rpx;
            line-height: 96rpx;
            padding-left: 24rpx;
        }
        .refund-type-btn {
            background-color: #fff;
            padding: 36rpx 24rpx;
            display: flex;
            button {
                flex: 1;
                background-color: #fff;
                overflow: visible;
                font-size: 30rpx;
                color: #666;
                border: 1px solid #dcdcdc;
                outline: 0;
                border-radius: 0;
                &.active {
                    border: 1px solid #ff414b;
                    position: relative;
                    top: 0;
                    left: 0;
                }
                &.active::before {
                    display: inline-block;
                    width: 40rpx;
                    height: 40rpx;
                    overflow: hidden;
                    content: '';
                    position: absolute;
                    bottom: -1px;
                    left: -1px;
                    background: url(https://i2.ygimg.cn/cmp/mp//btn-selected.png)
                        0 0 no-repeat;
                    background-size: 100%;
                }
            }
            button::after {
                border-radius: 0;
            }
        }
        .refundAddress {
            padding: 42rpx 30rpx;
            background-color: #fff;
            font-size: 28rpx;
            color: #333;
            view {
                margin-bottom: 30rpx;
                display: flex;
                text {
                    flex: 1;
                }
            }
        }
    }

    .btn {
        margin-top: 70rpx;
        margin-bottom: 70rpx;
        button {
            width: 594rpx;
            height: 80rpx;
            line-height: 80rpx;
            background-color: #ff414b;
            font-size: 32rpx;
            color: #fff;
        }
    }
}
.weui-select {
    height: 96rpx;
    line-height: 96rpx;
    min-height: auto;
    padding-left: 38rpx;
    text {
        color: #999;
        &.choose {
            color: #333;
        }
    }
}
.mtR5 {
    margin-right: 16rpx;
}
.refundAddress-wrap {
    text {
        display: inline-block;
    }
    .refundAddress-label {
        width: 21%;
        vertical-align: top;
    }
    .refundAddress-descript {
        width: 75%;
    }
}
.refundCount-wrap {
    .refundCount {
        background-color: #fff;
        height: 96rpx;
        line-height: 96rpx;
    }
}
view.counter-dist-index--counter {
    // margin-top:0;
}
.disabled {
    color: #999;
}
view.counter-dist-index--counter__number {
    height: 96rpx;
    line-height: 96rpx;
}
view.counter-dist-index--counter__modify.counter-dist-index--counter__opt {
    width: 96rpx;
    height: 94rpx;
    line-height: 94rpx;
}
text.counter-dist-index--counter__modify.counter-dist-index--counter__text {
    width: 96rpx;
    height: 93rpx;
    line-height: 93rpx;
    background-color: #fff;
}
view.counter-dist-index--counter__modify.counter-dist-index--counter__opt.counter-dist-index--counter__no {
    height: 94rpx;
    line-height: 94rpx;
}
.upload-wrap {
    .upload-add {
        width: 120rpx;
        height: 120rpx;
        border: 1rpx solid #dcdcdc;
        display: inline-block;
        margin: 0 24rpx;
        color: #dcdcdc;
        line-height: 120rpx;
        text-align: center;
        vertical-align: middle;
        background-color: #fff;
        font-size: 60rpx;
    }
    .iamge-wrap {
        position: relative;
        top: 0;
        left: 0;
        display: inline-block;
        width: 120rpx;
        height: 120rpx;
        border: 1rpx solid #dcdcdc;
        margin: 0 24rpx;
        vertical-align: middle;
        .del {
            width: 40rpx;
            height: 40rpx;
            background-color: #333;
            color: #fff;
            font-size: 35rpx;
            position: absolute;
            top: -15rpx;
            right: -15rpx;
            border-radius: 50%;
            line-height: 34rpx;
            text-align: center;
        }
        image {
            width: 120rpx;
            height: 120rpx;
            border: 1rpx solid #000;
            display: inline-block;
        }
    }
}
.img-mask {
    width: 120rpx;
    height: 120rpx;
    background-color: rgba(0, 0, 0, 0.5);
    position: absolute;
    top: 1rpx;
    left: 1rpx;
    image {
        width: 40rpx;
        height: 40rpx;
        position: absolute;
        top: 1rpx;
        left: 1rpx;
        z-index: 10000;
    }
}
</style>
<template>
  <view class="container">
    <view class="refundType" wx:if="{{isLoaded && orderStatus !== 'WAIT_DELIVER'}}">
      <view class="label">请选择退款类型</view>
      <view class="refund-type-btn">
        <button class="mtR5 {{curTabIndex == item.type ?'active' :''}}" wx:for="{{refundTypes}}" @tap="refundFormSelect" wx:key="{{index}}" data-type="{{item.type}}">{{item.name}}</button>
      </view>
    </view>
    <view class="refundType" wx:if="{{isLoaded && refundType === 'REJECTED_REFUND'}}">
      <view class="label">请将商品寄回以下地址</view>
      <view class="refundAddress">
        <view>
          <text>收货人：{{applicationInfo.backAddress.name}}</text>
          <text>联系电话：{{applicationInfo.backAddress.phone}}</text>
        </view>  
        <text class="refundAddress-wrap">
          <text class="refundAddress-label">收货地址：</text>
          <text class="refundAddress-descript">{{applicationInfo.backAddress.address}}</text>
        </text>
        
      </view>
    </view>
    <view class="section" wx:if="{{isLoaded && refundType === 'REJECTED_REFUND'}}">
      <view class="label"><text class="required">*</text>物流公司</view>
      <picker bindchange="bindLogisticChange" range="{{applicationInfo.expresses}}"  range-key="name" value="{{logisticIndex}}">
        <view class="weui-select">
          <text wx:if="{{logisticIndex == -1}}">请选择物流公司</text>
          {{applicationInfo.expresses[logisticIndex].name}}
        </view>
      </picker>
    </view>
    <view class="section refundPrice" wx:if="{{isLoaded && refundType == 'REJECTED_REFUND'}}">
      <view class="label"><text class="required">*</text>运单号</view>
      <input type="number"  placeholder="请输入物流单号"  placeholder-style="color:#999" bindblur="bindLogisticNum" value="{{logisticNum}}"/>
    </view>
    <view class="section refundReason">
      <view class="label"><text class="required">*</text>退款原因</view>
      <picker bindchange="bindReasonChange" range="{{ refundReason }}" value="{{refundReasonIndex}}">
        <view class="weui-select">
          <text class="{{refundReasonTxt != '请选择退款原因' ? 'choose' : ''}}">{{refundReasonTxt}}</text>
        </view>
      </picker>
    </view>
     <view class="section refundCount-wrap" wx:if="{{isLoaded && refundType == 'REJECTED_REFUND'}}">
      <view class="label"><text class="required">*</text>退货数量</view>
      <wxc-counter number="{{refundCount}}"  min="1" max="{{10000}}" bind:changenumber="onChangeNumber" class="refundCount"></wxc-counter>
    </view>
    <view class="section refundPrice">
      <view class="label"><text class="required">*</text>退款金额<text class="remark" wx:if="{{isLoaded && refundType == 'REJECTED_REFUND' || refundType == 'ONLY_REFUND'}}">(不可修改)</text></view>
      <input type="digit" bindblur="bindRefundAmount" class="{{ refundType == 'DELIVERD_REFUND' ? '' : 'disabled'}}" placeholder="请输入退款金额" disabled="{{curTabIndex == '1' && refundType == 'DELIVERD_REFUND' ? false : true }}"  placeholder-style="color:#999" value="{{refundAmount}}"/>
    </view>
    <view class="section textareaSection">
      <view class="label">退款说明<text class="remark">(可不填)</text></view>
      <textarea bindblur="bindTextAreaBlur" placeholder="0-200字" maxlength="200" placeholder-style="color:#999" adjust-position value="{{refundInstructions}}"/>
    </view>
    <view class="section uploadImage" wx:if="{{isLoaded &&  orderStatus !== 'WAIT_DELIVER'}}">
      <view class="label">上传图片<text class="remark">(最多三张)</text></view>
      <view class="upload-wrap">
        <view wx:for="{{imageArray}}" wx:key="{{index}}" class="iamge-wrap">
          <view class="del" @tap="delImage({{index}})">x</view>
          <view class="img-mask" wx:if="{{!item.isLoaded}}">
            <image mode="aspectFit" src="https://i2.ygimg.cn/cmp/mp/loading.gif" style="40rpx;height:40rpx;margin-top:40rpx;"></image>
          </view>
          <image class="goods-image" src="{{item.img}}" mode="aspectFit" @tap="previewImage({{index}})"/>
        </view>
        <view @tap="uploadImages" wx:if="{{remainCount < 4 && remainCount > 0}}" class="upload-add">+</view>
      </view>
    </view>
    <view class="section btn">
      <button form-type="submit" @tap.stop="submit">提交申请</button>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy';
export default class refundApplicationForm extends wepy.page {
    shareType = {};
    shareUrl = {};
    config = {
        navigationBarTitleText: '退款申请',
        usingComponents: {
            'wxc-counter': '../../packages/@minui/wxc-counter/dist/index'
        }
    };
    components = {};
    mixins = [];
    data = {
        isLoaded: false,
        curLoadIndex: -1, //当前上传图片Index值
        orderStatus: '',
        refundPriceDisable: true, //退款金额是否可编辑
        refundReasonTxt: '请选择退款原因',
        logisticIndex: -1, //物流索引
        refundReason: [],
        refundReason1: [
            '不想要了',
            '拍错了/订单信息有误',
            '七天无理由退货',
            '未按约定时间发货'
        ], //未发货仅退款
        refundReason2: [
            '七天无理由退货',
            '退运费',
            '收到商品破损',
            '少件/漏发',
            '收到商品与描述不符',
            '商品质量问题',
            '未收到货',
            '未按约定时间发货'
        ], //已发货，仅退款
        refundReason3: [
            '七天无理由退货',
            '收到商品破损',
            '少件/漏发',
            '收到商品与描述不符',
            '商品质量问题'
        ], //已发货，退货退款
        curTabIndex: '', //退款类型切换
        refundType: '', //售后类型
        logisticCode: '', //传参物流code码
        logisticName: '', //物流公司
        logisticNum: '', //物流单号
        refundCount: 1, //退货数量
        refundInstructions: '', //退款说明
        refundAmount: 0, //退款金额
        refundNo: '', //申请退款单号
        //请求参数
        orderId: '',
        orderDetailId: '',
        openId: wepy.getStorageSync('openid'),

        applicationInfo: {
            backAddress: {
                name: '',
                phone: '',
                address: ''
            },
            orderRefund: {
                canReturnNum: '', //可退货数量
                canReturnFee: '' //可退金额
            },
            orderDetail: {
                wfxPrice: '',
                id: ''
            },
            order: {
                id: '' //id
            },
            expresses: []
        },
        // 退款类型：
        refundTypes: [
            { name: '退货退款', type: 0 },
            { name: '仅退款', type: 1 }
        ],
        imageArray: [], //照片数组，页面渲染的路径
        imgUrl: [],
        remainCount: 3, //剩余上传照片的张数
        previewimageList: []
    };
    computed = {};
    methods = {};
    events = {};

    onLoad(opt) {
        console.log(opt);
        let that = this;
        this.orderId = opt.orderId;
        this.orderDetailId = opt.orderDetailId;
        this.orderStatus = opt.orderStatus;
        if (opt.orderStatus === 'WAIT_DELIVER') {
            this.refundReason = this.refundReason1;
            this.refundType = 'ONLY_REFUND';
        } else {
            this.curTabIndex = 0;
            if (this.curTabIndex === 0) {
                this.refundReason = this.refundReason3;
                this.refundType = 'REJECTED_REFUND';
            } else if (this.curTabIndex === 1) {
                this.refundReason = this.refundReason2;
                this.refundType = 'DELIVERD_REFUND';
            }
        }

        that.initPage();
    }
    //加载更多
    methods = {
        bindLogisticChange: function(e) {
            this.logisticIndex = e.detail.value;
            this.logisticName = this.applicationInfo.expresses[this.logisticIndex].name;
            this.logisticCode = this.applicationInfo.expresses[this.logisticIndex].no; //传给后台的id
            console.log(this.logisticCode);
        },
        bindReasonChange: function(e) {
            this.refundReasonTxt = this.refundReason[e.detail.value];
            console.log(this.refundReasonTxt);
        },
        submit: function() {
            let that = this;
            if (that.curTabIndex === 0 && that.orderStatus === 'DELIVERED') {
                console.log(this.logisticCode);
                if (this.logisticIndex === -1 || this.logisticCode === '') {
                    wepy.showToast({
                        title: '请选择物流公司',
                        icon: 'none',
                        duration: 2000
                    });
                    return;
                }

                if (this.logisticNum === '') {
                    wepy.showToast({
                        title: '请输入运单号',
                        icon: 'none',
                        duration: 2000
                    });
                    return;
                }
            }

            if (this.refundReasonTxt === '请选择退款原因') {
                wepy.showToast({
                    title: '请选择退款原因',
                    icon: 'none',
                    duration: 2000
                });
                return;
            }
            if (
                isNaN(that.refundAmount) ||
                that.refundAmount === '' ||
                that.refundAmount === '请输入退款金额'
            ) {
                wepy.showToast({
                    title: '请输入退款金额',
                    icon: 'none',
                    duration: 2000
                });
                return;
            }

            if (that.refundType === 'REJECTED_REFUND') {
                this.submitFun('/api/v2/order/doRefundAndGoods');
            }

            // 已发货---仅退款 未发货---仅退款
            if (
                that.refundType === 'ONLY_REFUND' ||
                that.refundType === 'DELIVERD_REFUND'
            ) {
                this.submitFun('/api/v2/order/doRefundOrder');
            }
        },
        refundFormSelect: function(e) {
            if (e.currentTarget.dataset.type !== this.curTabIndex) {
                //切换导航，清除传参数据
                this.refundReasonTxt = '请选择退款原因';
                if (e.currentTarget.dataset.type === 1) {
                    this.curTabIndex = 1;
                    this.refundReason = this.refundReason2;
                    this.refundType = 'DELIVERD_REFUND';
                    this.initPageFun('/api/v2/order/refundOrderInfo');
                } else {
                    this.curTabIndex = 0;
                    this.refundReason = this.refundReason3;
                    this.refundType = 'REJECTED_REFUND';
                    this.initPageFun('/api/v2/order/intoRefundAndGoods');
                }
            }
            console.log(e);
        },
        onChangeNumber(e) {
            console.log(e);
            this.$data.refundCount = parseInt(e.detail.number);
            if (
                e.detail.number >
                    this.applicationInfo.orderRefund.canReturnNum &&
                e.detail.type === 'add'
            ) {
                this.refundCount = this.applicationInfo.orderRefund.canReturnNum;
                this.$apply();
                wepy.showToast({
                    title: '数量超过最大限制',
                    icon: 'none',
                    duration: 2000
                });
                return false;
            } else {
                console.log('小于');
                this.refundCount = e.detail.number;
            }

            console.log(this.refundCount);
        },
        bindTextAreaBlur(e) {
            this.refundInstructions = e.detail.value;
            console.log(this.refundInstructions);
        },
        bindLogisticNum(e) {
            this.logisticNum = e.detail.value;
            console.log(this.logisticNum);
        },
        bindRefundAmount(e) {
            this.$data.refundAmount = parseFloat(e.detail.value);
            if (
                e.detail.value > this.applicationInfo.orderRefund.canReturnFee
            ) {
                this.refundAmount = this.applicationInfo.orderRefund.canReturnFee;
                wepy.showToast({
                    title: '超出最大可退金额',
                    icon: 'none',
                    duration: 2000
                });
                return false;
            } else {
                console.log('小于');
                this.refundAmount = parseFloat(e.detail.value);
            }
            this.$apply();
        },
        uploadImages(e) {
            console.log(e);
            var that = this;
            wepy
                .showActionSheet({ itemList: ['从相册中选择', '拍照'] })
                .then(res => {
                    if (!res.cancel) {
                        if (res.tapIndex === 0) {
                            that.chooseWxImage('album');
                        } else if (res.tapIndex === 1) {
                            that.chooseWxImage('camera');
                        }
                    }
                })
                .catch(res => {
                    console.log(res.errMsg);
                });
        },
        previewImage: function(i) {
            let that = this;
            wepy.previewImage({
                current: that.previewimageList[i], // 当前显示图片的http链接
                urls: that.previewimageList // 需要预览的图片http链接列表
            });
        },
        delImage: function(i) {
            let that = this;
            that.imageArray.splice(i, 1);
            that.imgUrl.splice(i, 1);
            that.previewimageList.splice(i, 1);
            that.remainCount++;
            console.log('url' + that.imgUrl);
            console.log('urlObj' + JSON.stringify(that.imageArray));
        }
    };

    initPage() {
        let that = this;
        //退货退款（数据初始化）
        if (that.refundType === 'REJECTED_REFUND') {
            that.initPageFun('/api/v2/order/intoRefundAndGoods');
        }

        //已发货 仅退款，未发货仅退款（数据初始化）
        if (
            that.refundType === 'ONLY_REFUND' ||
            that.refundType === 'DELIVERD_REFUND'
        ) {
            that.initPageFun('/api/v2/order/refundOrderInfo');
        }
    }

    initPageFun(url) {
        let that = this;
        wepy.showLoading();
        wepy
            .request({
                url: that.$parent.globalData.apiBaseUrl + url,
                method: 'GET',
                data: {
                    orderId: that.orderId,
                    orderDetailId: that.orderDetailId,
                    openId: wepy.getStorageSync('openid')
                }
            })
            .then(res => {
                wepy.hideLoading();
                console.log(res);
                if (res.data.code === 20000) {
                    that.applicationInfo = res.data.data;
                    if (!that.applicationInfo.orderRefund.delivered) {
                        this.refundType = 'ONLY_REFUND';
                        this.orderStatus = 'WAIT_DELIVER';
                    }
                    that.refundAmount =
                        that.applicationInfo.orderRefund.canReturnFee;
                } else {
                    wepy.showToast({
                        title: res.data.msg || res.data.errorMsg,
                        icon: 'none',
                        duration: 2000
                    });
                }
                that.isLoaded = true;
                that.$apply();
            })
            .catch(e => {
                that.isLoaded = true;
                that.$apply();
            });
    }
    submitFun(url) {
        let that = this;
        // wepy.showLoading();
        wepy
            .request({
                url: that.$parent.globalData.apiBaseUrl + url,
                method: 'POST',
                data: {
                    // 请求数据
                    openId: wepy.getStorageSync('openid'),
                    picContent: this.imgUrl,
                    orderId: this.orderId,
                    refundType: this.refundType,
                    reason: this.refundReasonTxt,
                    refundFee: this.refundAmount,
                    express: this.logisticName,
                    expressNo: this.logisticNum,
                    orderDetailId: this.orderDetailId,
                    description: this.refundInstructions,
                    deleteImgId: '',
                    wfxOrderNo: this.applicationInfo.orderDetail
                        .wfxOrderDetailNo,
                    proNum: this.refundCount
                }
            })
            .then(res => {
                wepy.hideLoading();
                if (res.data.code === 20000) {
                    if (res.data.data.type) {
                        that.refundNo = res.data.data.refundNo;
                    } else {
                        wepy.showToast({
                            title: '提交失败',
                            icon: 'none',
                            duration: 2000
                        });
                        return;
                    }
                    wepy
                        .navigateTo({
                            url:
                                '/usercenter/pages/refundDetail?refundNo=' +
                                that.refundNo
                        })
                        .then(() => console.log('请求成功！'))
                        .catch(() => {
                            console.log('请求失败');
                        });
                    that.$apply();
                } else {
                    wepy.showToast({
                        title: res.data.msg || res.data.errorMsg,
                        icon: 'none',
                        duration: 2000
                    });
                }
            });
    }
    //照片处理函数
    //照片处理函数
    async chooseWxImage(type) {
        try {
            let res = await wepy.chooseImage({
                count: this.remainCount,
                sizeType: ['original', 'compressed'],
                sourceType: [type]
            });
            var tempFilePaths = res.tempFilePaths;
            console.log('照片准备上传');
            console.log(res.tempFilePaths);
            this.remainCount = this.remainCount - res.tempFilePaths.length;
            this.imageArray = this.imageArray.concat(
                res.tempFilePaths.map((item, i) => {
                    return { img: item, isLoaded: false };
                })
            );

            let uploader = null;
            let maxIndex = this.imageArray.length - 1;
            console.log(this.imageArray.length);
            console.log(maxIndex);
            for (let i = 0; i < tempFilePaths.length; i++) {
                try {
                    uploader = await wepy.uploadFile({
                        url:
                            this.$parent.globalData.apiBaseUrl +
                            '/api/v2/order/uploadImg',
                        filePath: tempFilePaths[i],
                        name: 'file',
                        formData: {
                            merchantNo: '5682e8d7120c411bb38ddc252e6a74ee'
                        }
                    });
                    if (JSON.parse(uploader.data).code === 20000) {
                        let store = JSON.parse(uploader.data).data;
                        this.imgUrl.push(store);
                        this.curLoadIndex = i;
                        this.imageArray[i].isLoaded = true;
                        this.imageArray[maxIndex].isLoaded = true;
                        this.$apply();
                    }
                } catch (error) {
                    console.log(error);
                }
            }
            for (var i = 0; i < this.imgUrl.length; i++) {
                this.previewimageList[i] =
                    this.applicationInfo.basePath + this.imgUrl[i];
            }
            console.log(this.imgUrl);
            console.log(this.imageArray);
            console.log(this.previewimageList);

            this.$apply();
        } catch (error) {
            console.log('fail' + error);
        }
    }
}
</script>
